转载（http://blog.csdn.net/qq924862077/）
Executor：执行
Statement:声明
Handler：处理程序
wrapper:包装
Mapper:制图
Invocation:调用
Resuse:重用
Prepared：事先准备好

0.  PreparedStatementHandler就是调用PreparedStatement来执行SQL语句，这样在第一次执行sql语句时会进行预编译，在接下来执行相同的SQL语句时会提高数据库性能
    源码如下：
    /**
     * @author Clinton Begin
     */
    /* 使用PrepareStatement**/
    public class PreparedStatementHandler extends BaseStatementHandler {

      public PreparedStatementHandler(Executor executor, MappedStatement mappedStatement, Object parameter, RowBounds rowBounds, ResultHandler resultHandler,               BoundSql boundSql) {
        super(executor, mappedStatement, parameter, rowBounds, resultHandler, boundSql);
      }
      //
      public int update(Statement statement) throws SQLException {
        //使用PrepareStatement
        PreparedStatement ps = (PreparedStatement) statement;
        ps.execute();
        int rows = ps.getUpdateCount();
        Object parameterObject = boundSql.getParameterObject();
        KeyGenerator keyGenerator = mappedStatement.getKeyGenerator();
        //keyGenerator在执行之后运行
        keyGenerator.processAfter(executor, mappedStatement, ps, parameterObject);
        return rows;
      }
      //使用PrepareStatement的批处理
      public void batch(Statement statement) throws SQLException {
        PreparedStatement ps = (PreparedStatement) statement;
        ps.addBatch();
      }
      //使用PrepareStatement的execute操作
      public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
        PreparedStatement ps = (PreparedStatement) statement;
        ps.execute();
        //操作结果在ResultHandler中处理
        return resultSetHandler.<E> handleResultSets(ps);
      }
      //获得Statement
      protected Statement instantiateStatement(Connection connection) throws SQLException {
        String sql = boundSql.getSql();
        //根据KeyGenerator设置值的返回key的名称
        if (mappedStatement.getKeyGenerator() instanceof Jdbc3KeyGenerator) {
          String[] keyColumnNames = mappedStatement.getKeyColumns();
          if (keyColumnNames == null) {
            return connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
          } else {
            return connection.prepareStatement(sql, keyColumnNames);
          }
        } else if (mappedStatement.getResultSetType() != null) {
          return connection.prepareStatement(sql, mappedStatement.getResultSetType().getValue(), ResultSet.CONCUR_READ_ONLY);
        } else {
          return connection.prepareStatement(sql);
        }
      }

      public void parameterize(Statement statement) throws SQLException {
        parameterHandler.setParameters((PreparedStatement) statement);
      }

    }