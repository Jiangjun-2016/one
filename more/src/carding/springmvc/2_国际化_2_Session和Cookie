转载（http://blog.csdn.net/qq924862077/）

0.  上一篇博客 springMVC源码分析--国际化LocaleResolver（一）中我们介绍了springMVC提供的国际化的解决方案，
    接下来我们根据springMVC提供的解决方案来简单的实现一个多语言的支持。

1.  基于Session的国际化实现
    基于Session的国际化实现其实说来也简单，就是在Session中保存语言信息Locale，这样springMVC会从我们提供的多语言配置文件中读取相关语言的信息。
    （1）首先我们需要配置springMVC的多语言配置，因为我们打算使用Session来实现，所有对于localeResolver我们要配置其实现类SessionLocaleResolver，
    在springMVC的配置文件中添加如下配置：
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"/>

    （2）这里我们提供了一个多语言拦截器LanguageInterceptor，通过这个拦截器设置多语言信息，
    其实主要的代码就是request.getSession().setAttribute(SessionLocaleResolver.LOCALE_SESSION_ATTRIBUTE_NAME,locale)，这样springMVC会根据Locale的信息来获得多语言。
    public class LanguageInterceptor implements HandlerInterceptor{

        @Override
        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
                throws Exception {
            String language = request.getParameter("language");
            if (language != null&&language.equals("zh")) {
                Locale locale = new Locale("zh", "CN");
                request.getSession()
                        .setAttribute(
                                SessionLocaleResolver.LOCALE_SESSION_ATTRIBUTE_NAME,
                                locale);
                request.setAttribute("language", language);
            } else if (language != null&&language.equals("en")) {
                Locale locale = new Locale("en", "US");
                request.getSession()
                        .setAttribute(
                                SessionLocaleResolver.LOCALE_SESSION_ATTRIBUTE_NAME,
                                locale);
                request.setAttribute("language", language);
            } else {
                request.getSession().setAttribute(
                        SessionLocaleResolver.LOCALE_SESSION_ATTRIBUTE_NAME,
                        LocaleContextHolder.getLocale());
                language = LocaleContextHolder.getLocale().getLanguage();
                request.setAttribute("language", language);
            }
            return true;
        }
        @Override
        public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
                ModelAndView modelAndView) throws Exception {
        }
        @Override
        public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
                throws Exception {
        }

    }

    在springMVC的配置文件中配置拦截器
    <mvc:interceptors>
        <!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 -->
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
        <bean class="com.tianjunwei.interceptor.LanguageInterceptor"></bean>
    </mvc:interceptors>

    拦截特定请求：
    <mvc:interceptors>
        <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
        <bean class="com.host.app.web.interceptor.AllInterceptor"/>
        <mvc:interceptor>
            <mvc:mapping path="/test/number.do"/>
            <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
            <bean class="com.host.app.web.interceptor.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>
    由上面的示例可以看出可以利用mvc:interceptors标签声明一系列的拦截器，然后它们就可以形成一个拦截器链，拦截器的执行顺序是按声明的先后顺序执行的，
    先声明的拦截器中的preHandle方法会先执行，然而它的postHandle方法和afterCompletion方法却会后执行。
    在mvc:interceptors标签下声明interceptor主要有两种方式：
        （1）直接定义一个Interceptor实现类的bean对象。使用这种方式声明的Interceptor拦截器将会对所有的请求进行拦截。
        （2）使用mvc:interceptor标签进行声明。使用这种方式进行声明的Interceptor可以通过mvc:mapping子标签来定义需要进行拦截的请求路径。
    经过上述两步之后，定义的拦截器就会发生作用对特定的请求进行拦截了。

    在工程中添加多语言配置文件，在src/main/resources目录下新建messages目录，
    分别添加中英文的多语言配置文件message_en_US.properties和message_zh_CN.properties，文件中以key = value的形式保存多语言信息
    message_en_US.properties
    message=english messagge

    二、基于Cookie的国际化实现
    与上面类似，我们首先创建一个拦截器用来将多语言信息写到Cookie中，这样就可以通过cookie来切换多语言了。

    public class LanguageCookieInterceptor implements HandlerInterceptor{

        @Override
        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
                throws Exception {
            String language = request.getParameter("language");
            if (language != null&&language.equals("zh")) {
                Locale locale = new Locale("zh", "CN");
                (new CookieLocaleResolver()).setLocale (request, response, locale);
                request.setAttribute("language", language);
            } else if (language != null&&language.equals("en")) {
                Locale locale = new Locale("en", "US");
                (new CookieLocaleResolver()).setLocale (request, response, locale);
                request.setAttribute("language", language);
            } else {
                (new CookieLocaleResolver()).setLocale (request, response,
                        LocaleContextHolder.getLocale());
                language = LocaleContextHolder.getLocale().getLanguage();
                request.setAttribute("language", language);
            }
            return true;
        }

        @Override
        public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
                ModelAndView modelAndView) throws Exception {

        }

        @Override
        public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
                throws Exception {

        }

    }
    <mvc:interceptors>
        <!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 -->
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
        <!-- <bean class="com.tianjunwei.interceptor.LanguageInterceptor"></bean> -->
        <bean class="com.tianjunwei.interceptor.LanguageCookieInterceptor"></bean>
    </mvc:interceptors>
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"/>

    这样我们也可以实现通过Session实现的效果。
