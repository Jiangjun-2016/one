转载（http://blog.csdn.net/qq924862077/）
Handler:处理
Detecting:探测

0.
    HandLerMapping
        AbstractHandlerMapping
            AbstracctHandlerMethodMapping
                RequestMappingInfoHandler
                    RequestMapppingHandler
            AbstarctUrlHandlerMapping
                AbstractDetectingUrlHandlerMapping
                    AbtractControllerUrlHandlerMapping
                        ControllerBeanNameHanndlerMapping
                        ControllerClassNameHandlerMapping
                    BeanNameUrlHandlerMapping
                    DefaultAnnotationHandlerMapping
                SimpleUrlHandlerMapping

1.  AbstractControllerUrlHandlerMapping定义了抽象方法buildUrlsForHandler，接下来我们看看在其子类ControllerClassNameHandlerMapping中的实现。
    ControllerClassNameHandlerMapping中buildUrlsForHandler实现如下，根据beanClass来获取url

        @Override
        protected String[] buildUrlsForHandler(String beanName, Class<?> beanClass) {
            return generatePathMappings(beanClass);
        }
        protected String[] generatePathMappings(Class<?> beanClass) {
            StringBuilder pathMapping = buildPathPrefix(beanClass);
            String className = ClassUtils.getShortName(beanClass);
            String path = (className.endsWith(CONTROLLER_SUFFIX) ?
                    className.substring(0, className.lastIndexOf(CONTROLLER_SUFFIX)) : className);
            if (path.length() > 0) {
                if (this.caseSensitive) {
                    pathMapping.append(path.substring(0, 1).toLowerCase()).append(path.substring(1));
                }
                else {
                    pathMapping.append(path.toLowerCase());
                }
            }
            if (isMultiActionControllerType(beanClass)) {
                return new String[] {pathMapping.toString(), pathMapping.toString() + "/*"};
            }
            else {
                return new String[] {pathMapping.toString() + "*"};
            }
        }
        private StringBuilder buildPathPrefix(Class<?> beanClass) {
            StringBuilder pathMapping = new StringBuilder();
            if (this.pathPrefix != null) {
                pathMapping.append(this.pathPrefix);
                pathMapping.append("/");
            }
            else {
                pathMapping.append("/");
            }
            if (this.basePackage != null) {
                String packageName = ClassUtils.getPackageName(beanClass);
                if (packageName.startsWith(this.basePackage)) {
                    String subPackage = packageName.substring(this.basePackage.length()).replace('.', '/');
                    pathMapping.append(this.caseSensitive ? subPackage : subPackage.toLowerCase());
                    pathMapping.append("/");
                }
            }
            return pathMapping;
        }

完整的ControllerClassNameHandlerMapping的源码实现如下：
    public class ControllerClassNameHandlerMapping extends AbstractControllerUrlHandlerMapping {

        private static final String CONTROLLER_SUFFIX = "Controller";
        private boolean caseSensitive = false;
        private String pathPrefix;
        private String basePackage;
        public void setCaseSensitive(boolean caseSensitive) {
            this.caseSensitive = caseSensitive;
        }
        public void setPathPrefix(String prefixPath) {
            this.pathPrefix = prefixPath;
            if (StringUtils.hasLength(this.pathPrefix)) {
                if (!this.pathPrefix.startsWith("/")) {
                    this.pathPrefix = "/" + this.pathPrefix;
                }
                if (this.pathPrefix.endsWith("/")) {
                    this.pathPrefix = this.pathPrefix.substring(0, this.pathPrefix.length() - 1);
                }
            }
        }
        public void setBasePackage(String basePackage) {
            this.basePackage = basePackage;
            if (StringUtils.hasLength(this.basePackage) && !this.basePackage.endsWith(".")) {
                this.basePackage = this.basePackage + ".";
            }
        }
        @Override
        protected String[] buildUrlsForHandler(String beanName, Class<?> beanClass) {
            return generatePathMappings(beanClass);
        }
        protected String[] generatePathMappings(Class<?> beanClass) {
            StringBuilder pathMapping = buildPathPrefix(beanClass);
            String className = ClassUtils.getShortName(beanClass);
            String path = (className.endsWith(CONTROLLER_SUFFIX) ?
                    className.substring(0, className.lastIndexOf(CONTROLLER_SUFFIX)) : className);
            if (path.length() > 0) {
                if (this.caseSensitive) {
                    pathMapping.append(path.substring(0, 1).toLowerCase()).append(path.substring(1));
                }
                else {
                    pathMapping.append(path.toLowerCase());
                }
            }
            if (isMultiActionControllerType(beanClass)) {
                return new String[] {pathMapping.toString(), pathMapping.toString() + "/*"};
            }
            else {
                return new String[] {pathMapping.toString() + "*"};
            }
        }
        private StringBuilder buildPathPrefix(Class<?> beanClass) {
            StringBuilder pathMapping = new StringBuilder();
            if (this.pathPrefix != null) {
                pathMapping.append(this.pathPrefix);
                pathMapping.append("/");
            }
            else {
                pathMapping.append("/");
            }
            if (this.basePackage != null) {
                String packageName = ClassUtils.getPackageName(beanClass);
                if (packageName.startsWith(this.basePackage)) {
                    String subPackage = packageName.substring(this.basePackage.length()).replace('.', '/');
                    pathMapping.append(this.caseSensitive ? subPackage : subPackage.toLowerCase());
                    pathMapping.append("/");
                }
            }
            return pathMapping;
        }
    }
