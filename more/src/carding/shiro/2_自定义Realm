转载：

Security ：安全
Concurrency ：并发
Facade：外观
Authenticator：验证器
credentials：凭据
principals：负责人
Authorizer：授权人
Realm: 域
permission ：许可
primary concerns：主要关注问题
supporting features：支持的功能
Principal:主要的

1.  自定义Realm
    public class ShiroRealm extends AuthorizingRealm{



    }

    1、ShiroRealm父类AuthorizingRealm将获取Subject相关信息分成两步：获取身份验证信息（doGetAuthenticationInfo）及授权信息（doGetAuthorizationInfo）；

    2、doGetAuthenticationInfo获取身份验证相关信息：
        首先根据传入的用户名获取User信息；然后如果user为空，那么抛出没找到帐号异常UnknownAccountException；
        如果user找到但锁定了抛出锁定异常LockedAccountException；
        最后生成AuthenticationInfo信息，交给间接父类AuthenticatingRealm使用CredentialsMatcher进行判断密码是否匹配，
        如果不匹配将抛出密码错误异常IncorrectCredentialsException；
        另外如果密码重试此处太多将抛出超出重试次数异常ExcessiveAttemptsException；
        在组装SimpleAuthenticationInfo信息时，需要传入：身份信息（用户名）、凭据（密文密码）、盐（username+salt），
        CredentialsMatcher使用盐加密传入的明文密码和此处的密文密码进行匹配。

    3、doGetAuthorizationInfo获取授权信息：
        PrincipalCollection是一个身份集合，因为我们现在就一个Realm，所以直接调用getPrimaryPrincipal得到之前传入的用户名即可；
        然后根据用户名调用UserService接口获取角色及权限信息。

2.  AuthenticationToken
    AuthenticationToken用于收集用户提交的身份（如用户名）及凭据（如密码）：

    public interface AuthenticationToken extends Serializable {
        Object getPrincipal(); //身份
        Object getCredentials(); //凭据
    }
    扩展接口RememberMeAuthenticationToken：提供了“boolean isRememberMe()”现“记住我”的功能；

    扩展接口是HostAuthenticationToken：提供了“String getHost()”方法用于获取用户“主机”的功能。

    Shiro提供了一个直接拿来用的UsernamePasswordToken，用于实现用户名/密码Token组，另外其实现了RememberMeAuthenticationToken和HostAuthenticationToken，可以实现记住我及主机验证的支持。

3.  AuthenticationInfo
    AuthenticationInfo有两个作用：

    1、如果Realm是AuthenticatingRealm子类，则提供给AuthenticatingRealm内部使用的CredentialsMatcher进行凭据验证；（如果没有继承它需要在自己的Realm中自己实现验证）；

    2、提供给SecurityManager来创建Subject（提供身份信息）；

    MergableAuthenticationInfo用于提供在多Realm时合并AuthenticationInfo的功能，主要合并Principal、如果是其他的如credentialsSalt，会用后边的信息覆盖前边的。

    比如HashedCredentialsMatcher，在验证时会判断AuthenticationInfo是否是SaltedAuthenticationInfo子类，来获取盐信息。

    Account相当于我们之前的User，SimpleAccount是其一个实现；
    在IniRealm、PropertiesRealm这种静态创建帐号信息的场景中使用，这些Realm直接继承了SimpleAccountRealm，而SimpleAccountRealm提供了相关的API来动态维护SimpleAccount；即可以通过这些API来动态增删改查SimpleAccount；动态增删改查角色/权限信息。
    及如果您的帐号不是特别多，可以使用这种方式，具体请参考SimpleAccountRealm Javadoc。

    其他情况一般返回SimpleAuthenticationInfo即可。

4.  PrincipalCollection
    因为我们可以在Shiro中同时配置多个Realm，所以呢身份信息可能就有多个；因此其提供了PrincipalCollection用于聚合这些身份信息：

    public interface PrincipalCollection extends Iterable, Serializable {
        Object getPrimaryPrincipal(); //得到主要的身份
        <T> T oneByType(Class<T> type); //根据身份类型获取第一个
        <T> Collection<T> byType(Class<T> type); //根据身份类型获取一组
        List asList(); //转换为List
        Set asSet(); //转换为Set
        Collection fromRealm(String realmName); //根据Realm名字获取
        Set<String> getRealmNames(); //获取所有身份验证通过的Realm名字
        boolean isEmpty(); //判断是否为空
    }
    因为PrincipalCollection聚合了多个，此处最需要注意的是getPrimaryPrincipal，
    如果只有一个Principal那么直接返回即可，如果有多个Principal，则返回第一个（因为内部使用Map存储，所以可以认为是返回任意一个）；
    oneByType / byType根据凭据的类型返回相应的Principal；fromRealm根据Realm名字（每个Principal都与一个Realm关联）获取相应的Principal。

    目前Shiro只提供了一个实现SimplePrincipalCollection，还记得之前的AuthenticationStrategy实现嘛，用于在多Realm时判断是否满足条件的，
    在大多数实现中（继承了AbstractAuthenticationStrategy）afterAttempt方法会进行AuthenticationInfo（实现了MergableAuthenticationInfo）的merge，
    比如SimpleAuthenticationInfo会合并多个Principal为一个PrincipalCollection。

5.  AuthorizationInfo
    AuthorizationInfo用于聚合授权信息的：

    public interface AuthorizationInfo extends Serializable {
        Collection<String> getRoles(); //获取角色字符串信息
        Collection<String> getStringPermissions(); //获取权限字符串信息
        Collection<Permission> getObjectPermissions(); //获取Permission对象信息
    }
    当我们使用AuthorizingRealm时，如果身份验证成功，在进行授权时就通过doGetAuthorizationInfo方法获取角色/权限信息用于授权验证。

    Shiro提供了一个实现SimpleAuthorizationInfo，大多数时候使用这个即可。

    对于Account及SimpleAccount，之前的【6.3 AuthenticationInfo】已经介绍过了，用于SimpleAccountRealm子类，实现动态角色/权限维护的。
