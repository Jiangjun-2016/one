转载（http://blog.csdn.net/qq924862077/article/details/52839139）

0.Netty是由JBOSS提供的一个java开源框架。
    Netty提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。        
    Netty 是一个基于NIO的客户，服务器端编程框架，使用Netty 可以确保你快速和简单的开发出一个网络应用，例如实现了某种协议的客户，服务端应用。
    Netty相当简化和流线化了网络应用的编程开发过程，例如，TCP和UDP的socket服务开发。        
    “快速”和“简单”并不意味着会让你的最终应用产生维护性或性能上的问题。
    Netty 是一个吸收了多种协议的实现经验，这些协议包括FTP,SMTP,HTTP，各种二进制，文本协议，并经过相当精心设计的项目，
    最终，Netty 成功的找到了一种方式，在保证易于开发的同时还保证了其应用的性能，稳定性和伸缩性。

1.maven信息：
<dependency>
    <groupId>io.netty</groupId>
    <artifactId>netty-all</artifactId>
    <version>4.1.5.Final</version>
</dependency>

2.示例：
  Netty是网络应用程序框架和工具，接下来我们以C/S的模式来展示Netty的编程过程。

  Client：
  public class Client {

      static final String HOST = System.getProperty("host", "127.0.0.1");
      static final int PORT = Integer.parseInt(System.getProperty("port", "8080"));
      static final int SIZE = Integer.parseInt(System.getProperty("size", "256"));

      public static void main(String[] args) throws Exception {

          // Configure the client.
          EventLoopGroup group = new NioEventLoopGroup();
          try {
              Bootstrap b = new Bootstrap();
              b.group(group)
               .channel(NioSocketChannel.class)
               .option(ChannelOption.TCP_NODELAY, true)
               .handler(new ChannelInitializer<SocketChannel>() {
                   @Override
                   public void initChannel(SocketChannel ch) throws Exception {
                       ChannelPipeline p = ch.pipeline();
                       p.addLast("decoder", new StringDecoder());
                       p.addLast("encoder", new StringEncoder());
                       p.addLast(new ClientHandler());
                   }
               });

              ChannelFuture future = b.connect(HOST, PORT).sync();
              future.channel().writeAndFlush("Hello Netty Server ,I am a common client");
              future.channel().closeFuture().sync();
          } finally {
              group.shutdownGracefully();
          }
      }
  }

  Client实际操作：
  public class ClientHandler extends ChannelInboundHandlerAdapter{

      @Override
      public void channelActive(ChannelHandlerContext ctx) {
          System.out.println("HelloWorldClientHandler Active");
      }

      @Override
      public void channelRead(ChannelHandlerContext ctx, Object msg) {
         System.out.println("HelloWorldClientHandler read Message:"+msg);
      }


     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
         cause.printStackTrace();
         ctx.close();
      }
  }

  Server：
  public class Server {

      private int port;
      public Server(int port){
          this.port = port;
      }

      public void start(){
          EventLoopGroup bossGroup = new NioEventLoopGroup();
          EventLoopGroup workerGroup = new NioEventLoopGroup();

          try {
              ServerBootstrap serverBootstrap = new ServerBootstrap().group(bossGroup, workerGroup).channel(NioServerSocketChannel.class)
                      .localAddress(port).childHandler(new ChannelInitializer<SocketChannel>() {
                          @Override
                          protected void initChannel(SocketChannel ch) throws Exception {
                               ch.pipeline().addLast("decoder", new StringDecoder());
                                  ch.pipeline().addLast("encoder", new StringEncoder());
                                  ch.pipeline().addLast(new ServerHandler());
                          }
                      }).option(ChannelOption.SO_BACKLOG, 128)
                      .childOption(ChannelOption.SO_KEEPALIVE, true);
              ChannelFuture future = serverBootstrap.bind(port).sync();
              System.out.println("Server start listen at " + port );
              future.channel().closeFuture().sync();
          } catch (Exception e) {
               bossGroup.shutdownGracefully();
               workerGroup.shutdownGracefully();
          }
      }
      public static void main(String[] args) throws Exception {
          int port;
          if (args.length > 0) {
              port = Integer.parseInt(args[0]);
          } else {
              port = 8080;
          }
          new Server(port).start();
      }
  }

  Server实际操作
  public class ServerHandler extends ChannelInboundHandlerAdapter{

      @Override
      public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
          System.out.println("server channelRead..");
          System.out.println(ctx.channel().remoteAddress()+"->Server :"+ msg.toString());
          ctx.write("server write"+msg);
          ctx.flush();
      }
      @Override
      public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
           cause.printStackTrace();
           ctx.close();
      }
  }













