转载（http://www.cnblogs.com/qq-361807535/p/6516953.html）

0.缓冲区（Buffer）：一个用于特定基本数据类型的容器，由 java.nio 包定义的，所有缓冲区都是 Buffer 抽象类的子类。
    Java NIO 中的Buffer 主要用于和NIO中的通道（Channel）进行交互， 数据从通道（Channel）读入缓冲区（Buffer）或者从缓冲区（Buffer）写入通道（Channel）。
    Chanenl直接和数据源或者目的位置接触，Buffer作为中介这，从一个Channel中读取数据，然后将数据写入另一个Channel中。

1.Buffer 就像一个数组，可以保存多个相同类型的数据。根据数据类型不同(boolean 除外) ，有以下 Buffer 常用子类：
  　　　ByteBuffer
  　　　CharBuffer
  　　　ShortBuffer
  　　　IntBuffer
  　　　LongBuffer
  　　　FloatBuffer
  　　　DoubleBuffer
  上述 Buffer 类 他们都采用相似的方法进行管理数据，只是各自管理的数据类型不同而已。都是通过如下方法获取一个 Buffer对象：
  　　  static XxxBuffer allocate(int capacity) : 创建一个容量为capacity 的 XxxBuffer 对象 ，如下创建了一个容量为1024的ByteBuffer 。
  　　　ByteBuffer buffer = ByteBuffer.allocate(1024);

  前面说Buffer就像一个数据，实质Buffer的内部存放数据的就是一个对应类型的数组，如下看源码：
  public abstract class ByteBuffer extends Buffer implements Comparable<ByteBuffer>{

      final byte[] hb;//数组存放
      final int offset;
      boolean isReadOnly;
   ```
  }
  其他类型的Buffer类似。

2.Buffer的几个主要属性:
  　　position ： 下一个要读取或者写入数据的索引，其值不能为负不能大于limit。
  　　limit ： 第一个不应该读取或者写入数据的索引，即位于limit的数据不可读写，其值不能为负不能大于总容量。
  　　capacity ： 创建Buffer的最大容量，不能为负值，创建后不能修改。

  如下图超类变量的定义：
  public abstract class Buffer {

      static final int SPLITERATOR_CHARACTERISTICS =
          Spliterator.SIZED | Spliterator.SUBSIZED | Spliterator.ORDERED;

      // Invariants: mark <= position <= limit <= capacity
      private int mark = -1;
      private int position = 0;
      private int limit;
      private int capacity;
2.1.如下创建一个容量为 10 的Buffer (下标为 0-9 ，下标为10的不在Buffer容量中)：
    position : 0
    capacity ：10
    limit ：10
2.2.向上图中的Buffer写入五个元素后：
    position : 5
    capacity ：10
    limit ：10
2.3.使用 buffer.flip()函数转换为读模式后：
    position : 5
    capacity ：10
    limit ：10
    mark 为标记一个操作过了的位置。
    所以有： mark <= position <= limit <= capacity
3.Buffer的几个常用函数:
  　　　Buffer clear() ：清空缓冲区并返回对缓冲区的引用
  　　　Buffer flip()：将缓冲区的界限设置为当前位置，并将当前位置充值为 0
  　　　int capacity()：返回 Buffer 的 capacity 大小
  　　　boolean hasRemaining()：判断缓冲区中是否还有元素
  　　　int limit()：返回 Buffer 的界限(limit) 的位置　　
  　　　Buffer limit(int n)：将设置缓冲区界限为 n, 并返回一个具有新 limit 的缓冲区对象
  　　　Buffer mark()：对缓冲区设置标记
  　　　int position()：返回缓冲区的当前位置 position
  　　　Buffer position(int n)：将设置缓冲区的当前位置为 n , 并返回修改后的 Buffer 对象
  　　　int remaining()：返回 position 和 limit 之间的元素个数
  　　　Buffer reset() ：将位置 position 转到以前设置的mark 所在的位置
  　　　Buffer rewind()：将位置设为为 0， 取消设置的 mark
4.下面用一段代码来看各个方法调用后，position,capacity,limit的变化：
    public class BufferTest {

        @Test
        public void test(){
            String str = "abcde";

            //1. 分配一个指定大小的缓冲区
            ByteBuffer buf = ByteBuffer.allocate(1024);

            System.out.println("-----------------allocate()----------------");
            System.out.println(buf.position());
            System.out.println(buf.limit());
            System.out.println(buf.capacity());

            //2. 利用 put() 存入数据到缓冲区中
            buf.put(str.getBytes());

            System.out.println("-----------------put()----------------");
            System.out.println(buf.position());
            System.out.println(buf.limit());
            System.out.println(buf.capacity());

            //3. 切换读取数据模式
            buf.flip();

            System.out.println("-----------------flip()----------------");
            System.out.println(buf.position());
            System.out.println(buf.limit());
            System.out.println(buf.capacity());

            //4. 利用 get() 读取缓冲区中的数据
            byte[] dst = new byte[buf.limit()];
            buf.get(dst);
            System.out.println(new String(dst, 0, dst.length));

            System.out.println("-----------------get()----------------");
            System.out.println(buf.position());
            System.out.println(buf.limit());
            System.out.println(buf.capacity());

            //5. rewind() : 可重复读
            buf.rewind();

            System.out.println("-----------------rewind()----------------");
            System.out.println(buf.position());
            System.out.println(buf.limit());
            System.out.println(buf.capacity());

            //6. clear() : 清空缓冲区. 但是缓冲区中的数据依然存在，但是处于“被遗忘”状态
            buf.clear();

            System.out.println("-----------------clear()----------------");
            System.out.println(buf.position());
            System.out.println(buf.limit());
            System.out.println(buf.capacity());

            System.out.println((char)buf.get());

        }

    }

    运行结果：

    -----------------allocate()----------------
    1024
    -----------------put()----------------
    1024
    -----------------flip()----------------
    5
    abcde
    -----------------get()----------------
    5
    -----------------rewind()----------------
    5
    -----------------clear()----------------
    1024
    a

5.Buffer的存取方法：
  　　获取 Buffer 中的数据
  　　   get() ：读取单个字节
  　　   get(byte[] dst)：批量读取多个字节到 dst 中
  　　　 get(int index)：读取指定索引位置的字节(不会移动 position)
  　  放入数据到 Buffer 中
  　　　put(byte b)：将给定单个字节写入缓冲区的当前位置
  　　　put(byte[] src)：将 src 中的字节写入缓冲区的当前位置
  　　　put(int index, byte b)：将指定字节写入缓冲区的索引位置(不会移动 position)

6.非直接缓冲和直接缓冲区(对于字节缓冲区而言)
  　  1. 非直接缓冲区
  　　　　ByteBuffer  buf =  ByteBuffer.allocate(1024);
  　  2. 直接缓冲区
  　　　　ByteBuffer buf = ByteBuffer.allocateDirect(1024);
     ① 字节缓冲区要么是直接的，要么是非直接的。如果为直接字节缓冲区，则 Java 虚拟机会尽最大努力直接在此缓冲区上执行本机 I/O 操作。也就是说，在每次调用基础操作系统的一个本机 I/O 操作之前（或之后），虚拟机都会尽量避免将缓冲区的内容复制到中间缓冲区中（或从中间缓冲区中复制内容）。　　　
     ② 直接字节缓冲区可以通过调用此类的 allocateDirect() 工厂方法来创建。此方法返回的缓冲区进行分配和取消分配所需成本通常高于非直接缓冲区。直接缓冲区的内容可以驻留在常规的垃圾回收堆之外，因此，它们对应用程序的内存需求量造成的影响可能并不明显。所以，建议将直接缓冲区主要分配给那些易受基础系统的本机 I/O 操作影响的大型、持久的缓冲区。一般情况下，最好仅在直接缓冲区能在程序性能方面带来明显好处时分配它们。
     ③ 直接字节缓冲区还可以通过FileChannel 的 map() 方法 将文件区域直接映射到内存中来创建。该方法返回MappedByteBuffer 。Java 平台的实现有助于通过 JNI 从本机代码创建直接字节缓冲区。如果以上这些缓冲区中的某个缓冲区实例指的是不可访问的内存区域，则试图访问该区域不会更改该缓冲区的内容，并且将会在访问期间或稍后的某个时间导致抛出不确定的异常。
     ④字节缓冲区是直接缓冲区还是非直接缓冲区可通过调用其 isDirect() 方法来确定。提供此方法是为了能够在性能关键型代码中执行显式缓冲区管理。
