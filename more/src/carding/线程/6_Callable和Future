转载：http://blog.csdn.net/ghsau/article/details/7421217
monitor：监视锁
Traditional：传统
Specification：规范
Fixed:固定的
Callable:可赎回
Future：未来

    接着上一篇继续并发包的学习，本篇说明的是Callable和Future，它俩很有意思的，一个产生结果，一个拿到结果。
           Callable接口类似于Runnable，从名字就可以看出来了，但是Runnable不会返回结果，并且无法抛出返回结果的异常，而Callable功能更强大一些，被线程执行后，可以返回值，这个返回值可以被Future拿到，也就是说，Future可以拿到异步执行任务的返回值，下面来看一个简单的例子：

    public class CallableAndFuture {
        public static void main(String[] args) {
            Callable<Integer> callable = new Callable<Integer>() {
                public Integer call() throws Exception {
                    return new Random().nextInt(100);
                }
            };
            FutureTask<Integer> future = new FutureTask<Integer>(callable);
            new Thread(future).start();
            try {
                Thread.sleep(5000);// 可能做一些事情
                System.out.println(future.get());
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (ExecutionException e) {
                e.printStackTrace();
            }
        }
    }
           FutureTask实现了两个接口，Runnable和Future，所以它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值，那么这个组合的使用有什么好处呢？假设有一个很耗时的返回值需要计算，并且这个返回值不是立刻需要的话，那么就可以使用这个组合，用另一个线程去计算返回值，而当前线程在使用这个返回值之前可以做其它的操作，等到需要这个返回值时，再通过Future得到，岂不美哉！
           下面来看另一种方式使用Callable和Future，通过ExecutorService的submit方法执行Callable，并返回Future，代码如下：

    public class CallableAndFuture {
        public static void main(String[] args) {
            ExecutorService threadPool = Executors.newSingleThreadExecutor();
            Future<Integer> future = threadPool.submit(new Callable<Integer>() {
                public Integer call() throws Exception {
                    return new Random().nextInt(100);
                }
            });
            try {
                Thread.sleep(5000);// 可能做一些事情
                System.out.println(future.get());
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (ExecutionException e) {
                e.printStackTrace();
            }
        }
    }
           代码是不是简化了很多，ExecutorService继承自Executor，它的目的是为我们管理Thread对象，从而简化并发编程，Executor使我们无需显示的去管理线程的生命周期，是JDK 5之后启动任务的首选方式。
           执行多个带返回值的任务，并取得多个返回值，代码如下：

    public class CallableAndFuture {
        public static void main(String[] args) {
            ExecutorService threadPool = Executors.newCachedThreadPool();
            CompletionService<Integer> cs = new ExecutorCompletionService<Integer>(threadPool);
            for(int i = 1; i < 5; i++) {
                final int taskID = i;
                cs.submit(new Callable<Integer>() {
                    public Integer call() throws Exception {
                        return taskID;
                    }
                });
            }
            // 可能做一些事情
            for(int i = 1; i < 5; i++) {
                try {
                    System.out.println(cs.take().get());
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } catch (ExecutionException e) {
                    e.printStackTrace();
                }
            }
        }
    }
           其实也可以不使用CompletionService，可以先创建一个装Future类型的集合，用Executor提交的任务返回值添加到集合中，最后遍历集合取出数据，代码略。
           更新于2016-02-05，评论中就这个说法引发了讨论，其实是我没有讲清楚，抱歉。这里再阐述一下：提交到CompletionService中的Future是按照完成的顺序排列的，这种做法中Future是按照添加的顺序排列的。所以这两种方式的区别就像评论中fishjam所描述的那样。

           我也来参与讨论一下(纯属理论分析，没有实测)：
           1.CompletionService.take 会获取并清除已经完成Task的结果，如果当前没有已经完成Task时，会阻塞。
           2.“先创建一个装Future类型的集合，用Executor提交的任务返回值添加到集合中，最后遍历集合取出数据”
            -- 这种方法通常是按照Future加入的顺序。
            两个方法最大的差别在于遍历 Future 的顺序，相对来说， CompletionService 的性能更高。
            考虑如下场景：多线程下载，结果用Future返回。
            第一个文件特别大，后面的文件很小。
            用方法1，能很快知道已经下载完文件的结果(不是第一个)；
            而用方法2，必须等第一个文件下载结束后，才会获得其他文件的下载结果。

