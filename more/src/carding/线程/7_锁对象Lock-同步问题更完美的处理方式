转载：http://blog.csdn.net/ghsau/article/details/7421217
monitor：监视锁
Traditional：传统
Specification：规范
Fixed:固定的
Callable:可赎回
Future：未来

     Lock是java.util.concurrent.locks包下的接口，Lock 实现提供了比使用synchronized 方法和语句可获得的更广泛的锁定操作，它能以更优雅的方式处理线程同步问题，我们拿Java线程(二)中的一个例子简单的实现一下和sychronized一样的效果，代码如下：
    public class LockTest {
        public static void main(String[] args) {
            final Outputter1 output = new Outputter1();
            new Thread() {
                public void run() {
                    output.output("zhangsan");
                };
            }.start();
            new Thread() {
                public void run() {
                    output.output("lisi");
                };
            }.start();
        }
    }
    class Outputter1 {
        private Lock lock = new ReentrantLock();// 锁对象
        public void output(String name) {
            // TODO 线程输出方法
            lock.lock();// 得到锁
            try {
                for(int i = 0; i < name.length(); i++) {
                    System.out.print(name.charAt(i));
                }
            } finally {
                lock.unlock();// 释放锁
            }
        }
    }
            这样就实现了和sychronized一样的同步效果，需要注意的是，用sychronized修饰的方法或者语句块在代码执行完之后锁自动释放，而用Lock需要我们手动释放锁，所以为了保证锁最终被释放(发生异常情况)，要把互斥区放在try内，释放锁放在finally内。
            如果说这就是Lock，那么它不能成为同步问题更完美的处理方式，下面要介绍的是读写锁(ReadWriteLock)，我们会有一种需求，在对数据进行读写的时候，为了保证数据的一致性和完整性，需要读和写是互斥的，写和写是互斥的，但是读和读是不需要互斥的，这样读和读不互斥性能更高些，来看一下不考虑互斥情况的代码原型：
    public class ReadWriteLockTest {
        public static void main(String[] args) {
            final Data data = new Data();
            for (int i = 0; i < 3; i++) {
                new Thread(new Runnable() {
                    public void run() {
                        for (int j = 0; j < 5; j++) {
                            data.set(new Random().nextInt(30));
                        }
                    }
                }).start();
            }
            for (int i = 0; i < 3; i++) {
                new Thread(new Runnable() {
                    public void run() {
                        for (int j = 0; j < 5; j++) {
                            data.get();
                        }
                    }
                }).start();
            }
        }
    }
    class Data {
        private int data;// 共享数据
        public void set(int data) {
            System.out.println(Thread.currentThread().getName() + "准备写入数据");
            try {
                Thread.sleep(20);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            this.data = data;
            System.out.println(Thread.currentThread().getName() + "写入" + this.data);
        }
        public void get() {
            System.out.println(Thread.currentThread().getName() + "准备读取数据");
            try {
                Thread.sleep(20);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(Thread.currentThread().getName() + "读取" + this.data);
        }
    }
            部分输出结果：
    Thread-1准备写入数据
    Thread-3准备读取数据
    Thread-2准备写入数据
    Thread-0准备写入数据
    Thread-4准备读取数据
    Thread-5准备读取数据
    Thread-2写入12
    Thread-4读取12
    Thread-5读取5
    Thread-1写入12
            我们要实现写入和写入互斥，读取和写入互斥，读取和读取互斥，在set和get方法加入sychronized修饰符：
    public synchronized void set(int data) {...}
    public synchronized void get() {...}
            部分输出结果：
    [java] view plain copy print?
    Thread-0准备写入数据
    Thread-0写入9
    Thread-5准备读取数据
    Thread-5读取9
    Thread-5准备读取数据
    Thread-5读取9
    Thread-5准备读取数据
    Thread-5读取9
    Thread-5准备读取数据
    Thread-5读取9
            我们发现，虽然写入和写入互斥了，读取和写入也互斥了，但是读取和读取之间也互斥了，不能并发执行，效率较低，用读写锁实现代码如下：
    class Data {
        private int data;// 共享数据
        private ReadWriteLock rwl = new ReentrantReadWriteLock();
        public void set(int data) {
            rwl.writeLock().lock();// 取到写锁
            try {
                System.out.println(Thread.currentThread().getName() + "准备写入数据");
                try {
                    Thread.sleep(20);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                this.data = data;
                System.out.println(Thread.currentThread().getName() + "写入" + this.data);
            } finally {
                rwl.writeLock().unlock();// 释放写锁
            }
        }
        public void get() {
            rwl.readLock().lock();// 取到读锁
            try {
                System.out.println(Thread.currentThread().getName() + "准备读取数据");
                try {
                    Thread.sleep(20);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println(Thread.currentThread().getName() + "读取" + this.data);
            } finally {
                rwl.readLock().unlock();// 释放读锁
            }
        }
    }
            部分输出结果：
    Thread-4准备读取数据
    Thread-3准备读取数据
    Thread-5准备读取数据
    Thread-5读取18
    Thread-4读取18
    Thread-3读取18
    Thread-2准备写入数据
    Thread-2写入6
    Thread-2准备写入数据
    Thread-2写入10
    Thread-1准备写入数据
    Thread-1写入22
    Thread-5准备读取数据

            从结果可以看出实现了我们的需求，这只是锁的基本用法，锁的机制还需要继续深入学习。


